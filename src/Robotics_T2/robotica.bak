#define MOVE_TIME 500
#define TURN_TIME 200
#define THRESHOLD_BLACK 30
#define THRESHOLD_WHITE 60
#define THRESHOLD_GREY 40
#define NEAR 18
#define WAIT_TIME 100

mutex motorBmutex;

int Treshold_Line=0;
int Treshold_Victim=0;
int Treshold_Line1=0;
int Treshold_Victim1=0;
long Time_Without_Line=0;

int d=0, d1=0, d2=0;

/*
  PlayToneEx(262,400,3,FALSE);Wait(500);
          TextOut(15,LCD_LINE1,"Sensor US",true);
          NumOut(60,LCD_LINE2,SensorUS(IN_2));
          calibrate(SensorUS(IN_2),0);
*/

/*
obstacle detectd antigo
     SetSensorLowspeed(IN_2);
     Wait(100);
     OnRev(OUT_AC,100);
     Wait(100);
     RotateMotorEx(OUT_AC,50,120,100,true,true);

     if(SensorUS(IN_2)<NEAR){
       Off(OUT_AC);
     }

     OnFwd(OUT_AC,50);
     Wait(1000);

     RotateMotorEx(OUT_AC,50,180,-100,true,true);
     if(SensorUS(IN_2)<NEAR){
       Off(OUT_AC);
     }
     OnFwd(OUT_AC,50);
     Wait(2000);
     RotateMotorEx(OUT_AC,50,200,-100,true,true);

     if(SensorUS(IN_2)<NEAR){
       Off(OUT_AC);
     }

     OnFwd(OUT_AC,50);
     Wait(500);
     RotateMotorEx(OUT_AC,50,110,100,true,true); */
     
void obstacleDetected(){
     SetSensorLowspeed(IN_2);
     Wait(WAIT_TIME);
     OnRev(OUT_AC,100);
     Wait(WAIT_TIME);
     Off(OUT_AC);
     
     //Vira o sensor para a direita
     RotateMotor(OUT_B,20,-90);
     d1 = SensorUS(IN_2);
     
     RotateMotor(OUT_B,20,180);
     d2 = SensorUS(IN_2);
     
     RotateMotor(OUT_B,20,-90);

     d=d1-d2;

     if(d>=0){
       RotateMotorEx(OUT_AC,50,150,100,true,true);
       if(SensorUS(IN_2)<NEAR){
          Off(OUT_AC);
       }
       OnFwd(OUT_AC,50);
       Wait(1000);
       RotateMotorEx(OUT_AC,50,180,-100,true,true);

       if(SensorUS(IN_2)<NEAR){
          Off(OUT_AC);
       }
       OnFwd(OUT_AC,50);
       Wait(2000);
       RotateMotorEx(OUT_AC,50,200,-100,true,true);

       if(SensorUS(IN_2)<NEAR){
          Off(OUT_AC);
       }
       OnFwd(OUT_AC,50);
       Wait(500);
       RotateMotorEx(OUT_AC,50,110,100,true,true);
       
     }else
     if(d<0){
       RotateMotorEx(OUT_AC,50,120,-100,true,true);

       if(SensorUS(IN_2)<NEAR){
          Off(OUT_AC);
       }
       OnFwd(OUT_AC,50);
       Wait(1000);
       RotateMotorEx(OUT_AC,50,180,100,true,true);

       OnFwd(OUT_AC,50);
       Wait(2000);
       RotateMotorEx(OUT_AC,50,200,100,true,true);

       OnFwd(OUT_AC,50);
       Wait(500);
       RotateMotorEx(OUT_AC,50,110,-100,true,true);
     }
     
     /*SetSensorLowspeed(IN_2);
     Wait(100);
     OnRev(OUT_AC,100);
     Wait(100);
     

     RotateMotorEx(OUT_AC,50,120,100,true,true);
     

     RotateMotor(OUT_B,15,90);
     SensorUS(IN_2);

     RotateMotor(OUT_B,15,90);
     SensorUS(IN_2);


     if(SensorUS(IN_2)<NEAR){
       Off(OUT_AC);
     }

     OnFwd(OUT_AC,50);
     Wait(1000);

     RotateMotorEx(OUT_AC,50,180,-100,true,true);
     if(SensorUS(IN_2)<NEAR){
       Off(OUT_AC);
     }
     OnFwd(OUT_AC,50);
     Wait(2000);
     RotateMotorEx(OUT_AC,50,200,-100,true,true);

     if(SensorUS(IN_2)<NEAR){
       Off(OUT_AC);
     }

     OnFwd(OUT_AC,50);
     Wait(500);
     RotateMotorEx(OUT_AC,50,110,100,true,true);  */
}

task main()
{
     SetSensorLight(IN_3);
     SetSensorLight(IN_4);
     SetSensorLowspeed(IN_2);
     
     int sensorUS=0;
     int sensor_in3=0;
     int sensor_in4=0;
     int calibrationDone=0;
     int lineCount=0;
     int close=0;
     int victimCount=0;
     long t0;

     while(calibrationDone<2){

       sensorUS=SensorUS(IN_2);
       sensor_in3=Sensor(IN_3);
       sensor_in4=Sensor(IN_4);
       
       if(calibrationDone==0) {
       TextOut(1,LCD_LINE1,"Calibrate Lines",true);
          if(sensorUS<NEAR){
             PlayToneEx(300,400,3,FALSE);
             Treshold_Line=sensor_in3;
             Treshold_Line1=sensor_in4;
             Treshold_Line=THRESHOLD_BLACK;
             Treshold_Line1=THRESHOLD_BLACK;
             TextOut(15,LCD_LINE2,"Done",true);
             NumOut(60,LCD_LINE3,Treshold_Line);
             Wait(1000);
             calibrationDone++;
          }
       }
       
       sensorUS=SensorUS(IN_2);
       
       if(calibrationDone==1) {
          TextOut(1,LCD_LINE3,"Calibrate Victims",true);
          if(sensorUS<NEAR){
             PlayToneEx(300,400,3,FALSE);
             Treshold_Victim=sensor_in3;
             Treshold_Victim1=sensor_in3;
             Treshold_Victim1=THRESHOLD_GREY;
             Treshold_Victim=THRESHOLD_GREY;
             TextOut(15,LCD_LINE2,"Done",true);
             NumOut(60,LCD_LINE3,Treshold_Victim);
             Wait(1000);
             calibrationDone++;
          }
       }
       
     }
     
     do{
     sensorUS=SensorUS(IN_2);
     }
     while(sensorUS>=NEAR)
       
     PlayToneEx(262,400,3,FALSE);Wait(500);
     PlayToneEx(250,400,3,FALSE);
     
     while(true)
     {
       sensorUS=SensorUS(IN_2);
       sensor_in3=Sensor(IN_3);
       sensor_in4=Sensor(IN_4);
       
       if((sensor_in3 > Treshold_Line-10 && sensor_in3 < Treshold_Line+10)  && (sensor_in4 > Treshold_Line1-10 && sensor_in4 < Treshold_Line1+10)){
         OnFwd(OUT_AC,100);
         sensor_in3=100;
         sensor_in4=100;

         lineCount++;
         if(lineCount>5)
         {
           Off(OUT_AC);
           close=1;
         }
         TextOut(15,LCD_LINE2,"LineCount",true);
         NumOut(60,LCD_LINE3,lineCount);
         Time_Without_Line=CurrentTick();
       }
       else if(sensor_in3 > Treshold_Line-10 && sensor_in3 < Treshold_Line+10 ){
         OnRev(OUT_A,25);
         Wait(TURN_TIME);
         OnFwd(OUT_A,100);
         Time_Without_Line=CurrentTick();
       }
                
       else if(sensor_in4 > Treshold_Line1-10 && sensor_in4 < Treshold_Line1+10 ){
         OnRev(OUT_C,25);
         Wait(TURN_TIME);
         OnFwd(OUT_C,100);
         Time_Without_Line=CurrentTick();
       } else{
               OnFwd(OUT_AC,100);
       }
       
       
       if((sensor_in3 > Treshold_Victim-10 && sensor_in3 < Treshold_Victim+10)  && (sensor_in4 > Treshold_Victim1-10 && sensor_in4 < Treshold_Victim1+10)){
       
          if(victimCount==0){
            PlayToneEx(180,400,3,FALSE);
            t0=CurrentTick();
            Time_Without_Line=t0;
            victimCount++;
          }
          else if(CurrentTick()-t0>90){
          Off(OUT_AC);
          Wait(700);
          victimCount=0;
          }
          OnFwd(OUT_AC,50);
       }

       if(sensorUS < NEAR){
         Off(OUT_AC);
         obstacleDetected();
       }
       
       
     }
}

task US_TASK(){
   while (true)
  {
    Acquire(motorBmutex);
    RotateMotor(OUT_B,20,-90);
    d1 = SensorUS(IN_2);

    RotateMotor(OUT_B,20,180);
    d2 = SensorUS(IN_2);

    RotateMotor(OUT_B,20,-90);
    d=d1-d2;
    Release(motorBmutex);
  }
}
